---
- hosts: all
  become: true
  tasks:
    - name: Create keyrings directory
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Download and add Kubernetes GPG key
      shell: |
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Remove Kubernetes repository file
      ansible.builtin.file:
        path: /etc/apt/sources.list.d/kubernetes.list
        state: absent

    - name: Add a fresh new copy Kubernetes repository to apt sources
      ansible.builtin.lineinfile:
        path: /etc/apt/sources.list.d/kubernetes.list
        line: 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /'
        create: yes

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install Kubernetes packages
      apt:
        name:
          - kubeadm
          - kubectl
          - kubelet
        state: present

- hosts: control
  become: true
  tasks:
    - name: Initialize Kubernetes cluster on first control node
      shell: kubeadm init --control-plane-endpoint=k8ctl01 --node-name k8ctl01 --pod-network-cidr=10.244.0.0/16 --ignore-preflight-errors=all
      args:
        creates: /etc/kubernetes/admin.conf
      register: kubeadm_init
      when: inventory_hostname == groups['control'][0]

    - name: Create .kube directory
      file:
        path: $HOME/.kube
        state: directory
        mode: '0755'
      when: inventory_hostname == groups['control'][0]

    - name: Copy admin.conf to user's kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: $HOME/.kube/config
        remote_src: yes
      when: inventory_hostname == groups['control'][0] and kubeadm_init.changed

    - name: Change ownership of .kube/config
      file:
        path: $HOME/.kube/config
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"
      when: inventory_hostname == groups['control'][0] and kubeadm_init.changed

    - name: Install Flannel overlay network
      shell: kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml
      when: inventory_hostname == groups['control'][0] and kubeadm_init.changed

    - name: Get join command for control plane
      shell: kubeadm token create --print-join-command
      register: join_command_control
      when: inventory_hostname == groups['control'][0]

    - name: Add control plane flag to join command
      set_fact:
        control_plane_join_command: "{{ join_command_control.stdout }} --control-plane --certificate-key $(kubeadm init phase upload-certs --upload-certs | grep -vw -e certificate -e Namespace)"
      when: inventory_hostname == groups['control'][0]

    - name: Join additional control plane nodes
      shell: "{{ hostvars[groups['control'][0]]['control_plane_join_command'] }}"
      when: inventory_hostname != groups['control'][0]
      ignore_errors: yes

    - name: Get join command for worker nodes
      shell: kubeadm token create --print-join-command
      register: join_command_worker
      when: inventory_hostname == groups['control'][0]

    - name: Copy worker join command to local file
      local_action: copy content="{{ join_command_worker.stdout }}" dest="./worker-join-command"
      when: inventory_hostname == groups['control'][0]

- hosts: nodes
  become: true
  tasks:
    - name: Copy worker join command from local file
      copy:
        src: ./worker-join-command
        dest: /tmp/worker-join-command.sh
        mode: '0777'

    - name: Join worker nodes to the cluster
      command: sh /tmp/worker-join-command.sh
      register: join_cluster
      changed_when: join_cluster.rc == 0
      failed_when: join_cluster.rc != 0 and "This node has already been joined to the cluster" not in join_cluster.stderr

- hosts: control[0]
  become: true
  tasks:
    - name: Create pod.yml
      copy:
        content: |
          apiVersion: v1
          kind: Pod
          metadata:
            name: nginx-example
            labels:
              app: nginx
          spec:
            containers:
              - name: nginx
                image: linuxserver/nginx
                ports:
                  - containerPort: 80
                    name: "nginx-http"
        dest: /home/{{ ansible_user }}/pod.yml

    - name: Apply pod.yml
      command: kubectl apply -f /home/{{ ansible_user }}/pod.yml

    - name: Create service-nodeport.yml
      copy:
        content: |
          apiVersion: v1
          kind: Service
          metadata:
            name: nginx-example
          spec:
            type: NodePort
            ports:
              - name: http
                port: 80
                nodePort: 30080
                targetPort: nginx-http
            selector:
              app: nginx
        dest: /home/{{ ansible_user }}/service-nodeport.yml

    - name: Apply service-nodeport.yml
      command: kubectl apply -f /home/{{ ansible_user }}/service-nodeport.yml
